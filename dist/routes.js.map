{"version":3,"sources":["../src/routes.js"],"names":["queries","routes","DATO_API_TOKEN","process","env","endpoint","client","GraphQLClient","headers","Accept","Authorization","generalInfo","getData","page","request","getGeneralInfo","q","getPage","data","Object","assign","get","req","res","params","then","render","title"],"mappings":";;;;;;AAAA;;AACA;;AACA;;IAAYA,O;;;;AAEZ,MAAMC,SAAS,sBAAf;AACA,MAAM,EAAEC,cAAF,KAAqBC,QAAQC,GAAnC;AACA,MAAMC,WAAW,sCAAjB;AACA,MAAMC,SAAS,IAAIC,6BAAJ,CAAkBF,QAAlB,EAA4B;AACzCG,WAAS;AACP,oBAAgB,kBADT;AAEPC,YAAQ,kBAFD;AAGPC,mBAAgB,UAASR,cAAe;AAHjC;AADgC,CAA5B,CAAf;;AAQA,IAAIS,cAAc,IAAlB;;AAEA,MAAMC,UAAU,MAAMC,IAAN,IAAc;AAC5BA,SAAOA,OAAOA,IAAP,GAAc,EAArB;AACA,MAAI,CAACF,WAAL,EAAkB;AAChBA,kBAAc,MAAML,OAAOQ,OAAP,CAAed,QAAQe,cAAvB,CAApB;AACD;AACD,MAAIC,IAAIhB,QAAQiB,OAAR,CAAgBJ,IAAhB,CAAR;AACA,MAAIK,OAAO,MAAMZ,OAAOQ,OAAP,CAAeE,CAAf,CAAjB;AACAE,SAAOC,OAAOC,MAAP,CAAcF,IAAd,EAAoBP,WAApB,CAAP;AACA,SAAOO,IAAP;AACD,CATD;;AAWAjB,OAAOoB,GAAP,CAAW,QAAX,EAAqB,CAACC,GAAD,EAAMC,GAAN,KAAc;AACjC,MAAIV,OAAOS,IAAIE,MAAJ,CAAWX,IAAtB;AACAD,UAAQC,IAAR,EAAcY,IAAd,CAAmBP,QAAQ;AACzBK,QAAIG,MAAJ,CAAWb,IAAX,EAAiB,EAAEc,OAAOd,IAAT,EAAeK,IAAf,EAAjB;AACD,GAFD;AAGD,CALD;;AAOAjB,OAAOoB,GAAP,CAAW,GAAX,EAAgB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC5BX,YAAUa,IAAV,CAAeP,QAAQ;AACrBK,QAAIG,MAAJ,CAAW,MAAX,EAAmB,EAAEC,OAAO,MAAT,EAAiBT,IAAjB,EAAnB;AACD,GAFD;AAGD,CAJD;;kBAMejB,M","file":"routes.js","sourcesContent":["import { GraphQLClient } from \"graphql-request\";\nimport { Router } from \"express\";\nimport * as queries from \"./queries\";\n\nconst routes = Router();\nconst { DATO_API_TOKEN } = process.env;\nconst endpoint = \"https://site-api.datocms.com/graphql\";\nconst client = new GraphQLClient(endpoint, {\n  headers: {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n    Authorization: `Bearer ${DATO_API_TOKEN}`\n  }\n});\n\nlet generalInfo = null;\n\nconst getData = async page => {\n  page = page ? page : \"\";\n  if (!generalInfo) {\n    generalInfo = await client.request(queries.getGeneralInfo);\n  }\n  let q = queries.getPage(page);\n  let data = await client.request(q);\n  data = Object.assign(data, generalInfo);\n  return data;\n};\n\nroutes.get(\"/:page\", (req, res) => {\n  let page = req.params.page;\n  getData(page).then(data => {\n    res.render(page, { title: page, data });\n  });\n});\n\nroutes.get(\"/\", (req, res) => {\n  getData().then(data => {\n    res.render(\"home\", { title: \"Home\", data });\n  });\n});\n\nexport default routes;\n"]}